/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
        umlu: u {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(U) &kp U>;
            label = "U";
        };

        umua: umua {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(U) &kp A>;
            label = "UMUA";
        };

        umlo: umlo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(U) &kp O>;
            label = "UMLO";
        };

        cap_uma: alt_u_shift_a {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LA(U)>,
                <&macro_release>,
                <&macro_press>,
                <&kp LS(A)>,
                <&macro_release>;

            label = "ALT_U_SHIFT_A";
        };

        cap_umu: cap_umu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LA(U)>,
                <&macro_release>,
                <&macro_press>,
                <&kp LS(U)>,
                <&macro_release>;

            label = "CAP_UMU";
        };

        cap_umo: cap_umo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LA(U)>,
                <&macro_release>,
                <&macro_press>,
                <&kp LS(O)>,
                <&macro_release>;

            label = "CAP_UMO";
        };
    };

    behaviors {
        caps_blue: caps_blue {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS_BLUE";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&sl 3>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        tap_umo: tap_umo {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_UMO";
            bindings = <&cap_umo>, <&umlo>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <16>;
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
        };

        tap_uma: tap_uma {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_UMA";
            bindings = <&cap_uma>, <&umua>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <13>;
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
        };

        tap_umu: tap_umu {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_UMU";
            bindings = <&umlu>, <&cap_umu>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <15>;
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&mt GRAVE ESC  &kp Q       &kp W           &kp E        &kp R        &kp T            &kp Z    &kp U        &kp I                        &kp O       &kp P                &kp BSPC
&kp TAB        &hm LGUI A  &hm LEFT_ALT S  &hm LCTRL D  &hm LSHFT F  &kp G            &kp H    &hm RSHFT J  &hm RCTRL K                  &hm RALT L  &hm RGUI SEMI        &kp HASH
&caps_blue     &kp Y       &kp X           &kp C        &kp V        &kp B            &kp N    &kp M        &kp COMMA                    &kp DOT     &mt BACKSLASH SLASH  &kp MINUS
                                           &mo 1        &lt 2 SPACE  &kp BACKSPACE    &kp RET  &mo 2        &mt LA(LC(SPACE)) LG(SPACE)
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp F7     &kp F6                &kp F4                 &kp LS(LG(N2))  &kp LS(LG(T))  &kp LG(LS(N5))    &kp N7   &kp N8  &kp N9  &kp ASTERISK  &kp LS(LBKT)           &kp LS(RBKT)
&kp SPACE  &tap_uma 0 0          &kp LA(S)              &tap_umu 0 0    &tap_umo 0 0   &key_repeat       &kp N4   &kp N5  &kp N6  &kp EQUAL     &mt LCMD LEFT_BRACKET  &mt LSHFT RIGHT_BRACKET
&kp LSHFT  &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)  &kp LG(LEFT)    &kp LG(RIGHT)  &trans            &kp N1   &kp N2  &kp N3  &kp MINUS     &kp LPAR               &kp RPAR
                                                        &kp LGUI        &mo 4          &kp SPACE         &kp RET  &trans  &kp N0
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp HASH  &kp DLLR    &kp PRCNT           &kp CARET     &kp AMPS  &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL   &umlu              &trans           &umlu     &kp LSHIFT  &trans              &kp UP_ARROW  &kp LEFT  &kp RIGHT        &kp DOWN  &kp BSLH  &kp GRAVE
&kp C_PLAY  &kp C_PREV         &kp C_NEXT       &kp F14   &kp F15     &kp SINGLE_QUOTE    &kp UNDER     &kp PLUS  &kp LBRC         &kp RBRC  &kp PIPE  &kp TILDE
                                                &kp LGUI  &trans      &kp SPACE           &kp RET       &trans    &kp RALT
            >;
        };

        bluetooth_layer {
            bindings = <
&trans        &trans        &trans        &trans        &bt BT_PRV    &bt BT_NXT    &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans        &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR    &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
                                          &trans        &trans        &trans        &trans  &trans  &trans
            >;
        };

        shiftednum_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LS(N4)  &kp LS(N5)  &kp LS(N6)  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LS(N1)  &kp RS(N2)  &kp LS(N3)  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans      &trans      &trans
            >;
        };
    };
};
